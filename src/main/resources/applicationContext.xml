<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!-- 1. 配置 SecurityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="realm" ref="jdbcRealm"/>
    </bean>

    <!--
        2. 配置 CacheManager
        2.1 加入 ehcache 的 jar 包
     -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!--
        3. 配置 Realm
        3.1 配置是实现了 org.apache.shiro.realm.Realm 接口的 Realm
     -->
    <bean id="jdbcRealm" class="com.okada.shiro.realm.DatabaseRealm">
        <!--<property name="credentialsMatcher">-->
            <!--<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
                <!--<property name="hashAlgorithmName" value="MD5"/>-->
                <!--<property name="hashIterations" value="1024"/>-->
            <!--</bean>-->
        <!--</property>-->
    </bean>


    <!--
        4. 配置 LifecycleBeanPostProcessor，可以自动调用配置 Spring IoC 容器中的 shiro bean 的生命周期方法
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 5. 启动 IoC 容器中使用 shrio 的注解，但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--
        6. 配置 shiroFilter
        6.1 id 必须和 web.xml 文件中配置 DelegatingFilterProxy 的 <filter-name> 一致
            若不一致，会抛出：NoSuchBeanDefinitionException 异常。因为 Shiro 会来 IoC 容器中查找和 <filter-name> 名字对应的 filter bean
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!--
            配置哪些页面需要受保护
            以及访问这些页面需要的权限
            1）anon 可以被匿名访问
            2）authc 必须认证（即登陆）后才可以访问的页面
            3）logout 登出
            4）roles 角色过滤器
        -->
        <!--<property name="filterChainDefinitions">-->
            <!--<value>-->
                <!--/login.jsp = anon-->
                <!--/user/login = anon-->
                <!--/user/logout = logout-->

                <!--/user.jsp = roles[user]-->
                <!--/admin.jsp = roles[admin]-->

                <!--/** = authc-->
            <!--</value>-->
        <!--</property>-->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>
    </bean>

    <bean id="filterChainDefinitionMap"
          factory-bean="filterChainDefinitionBuilder"
          factory-method="buildFilterChainDefinitionMap"/>
    <bean id="filterChainDefinitionBuilder" class="com.okada.shiro.factory.FilterChainDefinitionMapBuilder"/>

</beans>